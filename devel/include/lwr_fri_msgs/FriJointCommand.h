// Generated by gencpp from file lwr_fri_msgs/FriJointCommand.msg
// DO NOT EDIT!


#ifndef LWR_FRI_MSGS_MESSAGE_FRIJOINTCOMMAND_H
#define LWR_FRI_MSGS_MESSAGE_FRIJOINTCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lwr_fri_msgs
{
template <class ContainerAllocator>
struct FriJointCommand_
{
  typedef FriJointCommand_<ContainerAllocator> Type;

  FriJointCommand_()
    : jntPos()
    , jntVel()
    , addJntTrq()  {
      jntPos.assign(0.0);

      jntVel.assign(0.0);

      addJntTrq.assign(0.0);
  }
  FriJointCommand_(const ContainerAllocator& _alloc)
    : jntPos()
    , jntVel()
    , addJntTrq()  {
  (void)_alloc;
      jntPos.assign(0.0);

      jntVel.assign(0.0);

      addJntTrq.assign(0.0);
  }



   typedef boost::array<float, 7>  _jntPos_type;
  _jntPos_type jntPos;

   typedef boost::array<float, 7>  _jntVel_type;
  _jntVel_type jntVel;

   typedef boost::array<float, 7>  _addJntTrq_type;
  _addJntTrq_type addJntTrq;





  typedef boost::shared_ptr< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> const> ConstPtr;

}; // struct FriJointCommand_

typedef ::lwr_fri_msgs::FriJointCommand_<std::allocator<void> > FriJointCommand;

typedef boost::shared_ptr< ::lwr_fri_msgs::FriJointCommand > FriJointCommandPtr;
typedef boost::shared_ptr< ::lwr_fri_msgs::FriJointCommand const> FriJointCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lwr_fri_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lwr_fri_msgs': ['/home/giel/etasl/ws/my_new_workspace/src/kuka-robot-hardware/lwr_fri_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10f89dabbe358204afa3f190e7d10f5f";
  }

  static const char* value(const ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10f89dabbe358204ULL;
  static const uint64_t static_value2 = 0xafa3f190e7d10f5fULL;
};

template<class ContainerAllocator>
struct DataType< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lwr_fri_msgs/FriJointCommand";
  }

  static const char* value(const ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[7] jntPos\n\
float32[7] jntVel\n\
float32[7] addJntTrq \n\
";
  }

  static const char* value(const ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jntPos);
      stream.next(m.jntVel);
      stream.next(m.addJntTrq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FriJointCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lwr_fri_msgs::FriJointCommand_<ContainerAllocator>& v)
  {
    s << indent << "jntPos[]" << std::endl;
    for (size_t i = 0; i < v.jntPos.size(); ++i)
    {
      s << indent << "  jntPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jntPos[i]);
    }
    s << indent << "jntVel[]" << std::endl;
    for (size_t i = 0; i < v.jntVel.size(); ++i)
    {
      s << indent << "  jntVel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jntVel[i]);
    }
    s << indent << "addJntTrq[]" << std::endl;
    for (size_t i = 0; i < v.addJntTrq.size(); ++i)
    {
      s << indent << "  addJntTrq[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.addJntTrq[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LWR_FRI_MSGS_MESSAGE_FRIJOINTCOMMAND_H
