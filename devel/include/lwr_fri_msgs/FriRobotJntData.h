// Generated by gencpp from file lwr_fri_msgs/FriRobotJntData.msg
// DO NOT EDIT!


#ifndef LWR_FRI_MSGS_MESSAGE_FRIROBOTJNTDATA_H
#define LWR_FRI_MSGS_MESSAGE_FRIROBOTJNTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lwr_fri_msgs
{
template <class ContainerAllocator>
struct FriRobotJntData_
{
  typedef FriRobotJntData_<ContainerAllocator> Type;

  FriRobotJntData_()
    : msrJntPos()
    , cmdJntPos()
    , cmdJntPosFriOffset()
    , msrJntTrq()
    , estExtJntTrq()
    , gravity()  {
      msrJntPos.assign(0.0);

      cmdJntPos.assign(0.0);

      cmdJntPosFriOffset.assign(0.0);

      msrJntTrq.assign(0.0);

      estExtJntTrq.assign(0.0);

      gravity.assign(0.0);
  }
  FriRobotJntData_(const ContainerAllocator& _alloc)
    : msrJntPos()
    , cmdJntPos()
    , cmdJntPosFriOffset()
    , msrJntTrq()
    , estExtJntTrq()
    , gravity()  {
  (void)_alloc;
      msrJntPos.assign(0.0);

      cmdJntPos.assign(0.0);

      cmdJntPosFriOffset.assign(0.0);

      msrJntTrq.assign(0.0);

      estExtJntTrq.assign(0.0);

      gravity.assign(0.0);
  }



   typedef boost::array<float, 7>  _msrJntPos_type;
  _msrJntPos_type msrJntPos;

   typedef boost::array<float, 7>  _cmdJntPos_type;
  _cmdJntPos_type cmdJntPos;

   typedef boost::array<float, 7>  _cmdJntPosFriOffset_type;
  _cmdJntPosFriOffset_type cmdJntPosFriOffset;

   typedef boost::array<float, 7>  _msrJntTrq_type;
  _msrJntTrq_type msrJntTrq;

   typedef boost::array<float, 7>  _estExtJntTrq_type;
  _estExtJntTrq_type estExtJntTrq;

   typedef boost::array<float, 7>  _gravity_type;
  _gravity_type gravity;





  typedef boost::shared_ptr< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> const> ConstPtr;

}; // struct FriRobotJntData_

typedef ::lwr_fri_msgs::FriRobotJntData_<std::allocator<void> > FriRobotJntData;

typedef boost::shared_ptr< ::lwr_fri_msgs::FriRobotJntData > FriRobotJntDataPtr;
typedef boost::shared_ptr< ::lwr_fri_msgs::FriRobotJntData const> FriRobotJntDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lwr_fri_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lwr_fri_msgs': ['/home/giel/etasl/ws/my_new_workspace/src/kuka-robot-hardware/lwr_fri_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0aaff558814188d51a3ef7a1023d53a7";
  }

  static const char* value(const ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0aaff558814188d5ULL;
  static const uint64_t static_value2 = 0x1a3ef7a1023d53a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lwr_fri_msgs/FriRobotJntData";
  }

  static const char* value(const ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[7] msrJntPos\n\
float32[7] cmdJntPos\n\
float32[7] cmdJntPosFriOffset\n\
float32[7] msrJntTrq\n\
float32[7] estExtJntTrq\n\
float32[7] gravity\n\
";
  }

  static const char* value(const ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msrJntPos);
      stream.next(m.cmdJntPos);
      stream.next(m.cmdJntPosFriOffset);
      stream.next(m.msrJntTrq);
      stream.next(m.estExtJntTrq);
      stream.next(m.gravity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FriRobotJntData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lwr_fri_msgs::FriRobotJntData_<ContainerAllocator>& v)
  {
    s << indent << "msrJntPos[]" << std::endl;
    for (size_t i = 0; i < v.msrJntPos.size(); ++i)
    {
      s << indent << "  msrJntPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.msrJntPos[i]);
    }
    s << indent << "cmdJntPos[]" << std::endl;
    for (size_t i = 0; i < v.cmdJntPos.size(); ++i)
    {
      s << indent << "  cmdJntPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cmdJntPos[i]);
    }
    s << indent << "cmdJntPosFriOffset[]" << std::endl;
    for (size_t i = 0; i < v.cmdJntPosFriOffset.size(); ++i)
    {
      s << indent << "  cmdJntPosFriOffset[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cmdJntPosFriOffset[i]);
    }
    s << indent << "msrJntTrq[]" << std::endl;
    for (size_t i = 0; i < v.msrJntTrq.size(); ++i)
    {
      s << indent << "  msrJntTrq[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.msrJntTrq[i]);
    }
    s << indent << "estExtJntTrq[]" << std::endl;
    for (size_t i = 0; i < v.estExtJntTrq.size(); ++i)
    {
      s << indent << "  estExtJntTrq[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.estExtJntTrq[i]);
    }
    s << indent << "gravity[]" << std::endl;
    for (size_t i = 0; i < v.gravity.size(); ++i)
    {
      s << indent << "  gravity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gravity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LWR_FRI_MSGS_MESSAGE_FRIROBOTJNTDATA_H
