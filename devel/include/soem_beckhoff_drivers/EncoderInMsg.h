// Generated by gencpp from file soem_beckhoff_drivers/EncoderInMsg.msg
// DO NOT EDIT!


#ifndef SOEM_BECKHOFF_DRIVERS_MESSAGE_ENCODERINMSG_H
#define SOEM_BECKHOFF_DRIVERS_MESSAGE_ENCODERINMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace soem_beckhoff_drivers
{
template <class ContainerAllocator>
struct EncoderInMsg_
{
  typedef EncoderInMsg_<ContainerAllocator> Type;

  EncoderInMsg_()
    : status(0)
    , value(0)
    , latch(0)
    , frequency(0)
    , period(0)
    , window(0)  {
    }
  EncoderInMsg_(const ContainerAllocator& _alloc)
    : status(0)
    , value(0)
    , latch(0)
    , frequency(0)
    , period(0)
    , window(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef uint16_t _value_type;
  _value_type value;

   typedef uint16_t _latch_type;
  _latch_type latch;

   typedef uint32_t _frequency_type;
  _frequency_type frequency;

   typedef uint16_t _period_type;
  _period_type period;

   typedef uint16_t _window_type;
  _window_type window;





  typedef boost::shared_ptr< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderInMsg_

typedef ::soem_beckhoff_drivers::EncoderInMsg_<std::allocator<void> > EncoderInMsg;

typedef boost::shared_ptr< ::soem_beckhoff_drivers::EncoderInMsg > EncoderInMsgPtr;
typedef boost::shared_ptr< ::soem_beckhoff_drivers::EncoderInMsg const> EncoderInMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace soem_beckhoff_drivers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'soem_beckhoff_drivers': ['/home/giel/etasl/ws/my_new_workspace/src/rtt_soem/soem_beckhoff_drivers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b22beb20aeb227634f7e90cad065f8e8";
  }

  static const char* value(const ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb22beb20aeb22763ULL;
  static const uint64_t static_value2 = 0x4f7e90cad065f8e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "soem_beckhoff_drivers/EncoderInMsg";
  }

  static const char* value(const ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n\
uint16 value\n\
uint16 latch\n\
uint32 frequency\n\
uint16 period\n\
uint16 window\n\
";
  }

  static const char* value(const ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.value);
      stream.next(m.latch);
      stream.next(m.frequency);
      stream.next(m.period);
      stream.next(m.window);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderInMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::soem_beckhoff_drivers::EncoderInMsg_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "value: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.value);
    s << indent << "latch: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.latch);
    s << indent << "frequency: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "period: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.period);
    s << indent << "window: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.window);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOEM_BECKHOFF_DRIVERS_MESSAGE_ENCODERINMSG_H
