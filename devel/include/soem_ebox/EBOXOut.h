// Generated by gencpp from file soem_ebox/EBOXOut.msg
// DO NOT EDIT!


#ifndef SOEM_EBOX_MESSAGE_EBOXOUT_H
#define SOEM_EBOX_MESSAGE_EBOXOUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace soem_ebox
{
template <class ContainerAllocator>
struct EBOXOut_
{
  typedef EBOXOut_<ContainerAllocator> Type;

  EBOXOut_()
    : trigger()
    , digital()
    , analog()
    , timestamp(0)
    , encoder()  {
      trigger.assign(false);

      digital.assign(false);

      analog.assign(0.0);

      encoder.assign(0);
  }
  EBOXOut_(const ContainerAllocator& _alloc)
    : trigger()
    , digital()
    , analog()
    , timestamp(0)
    , encoder()  {
  (void)_alloc;
      trigger.assign(false);

      digital.assign(false);

      analog.assign(0.0);

      encoder.assign(0);
  }



   typedef boost::array<uint8_t, 2>  _trigger_type;
  _trigger_type trigger;

   typedef boost::array<uint8_t, 8>  _digital_type;
  _digital_type digital;

   typedef boost::array<float, 2>  _analog_type;
  _analog_type analog;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<int32_t, 2>  _encoder_type;
  _encoder_type encoder;





  typedef boost::shared_ptr< ::soem_ebox::EBOXOut_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soem_ebox::EBOXOut_<ContainerAllocator> const> ConstPtr;

}; // struct EBOXOut_

typedef ::soem_ebox::EBOXOut_<std::allocator<void> > EBOXOut;

typedef boost::shared_ptr< ::soem_ebox::EBOXOut > EBOXOutPtr;
typedef boost::shared_ptr< ::soem_ebox::EBOXOut const> EBOXOutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::soem_ebox::EBOXOut_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::soem_ebox::EBOXOut_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace soem_ebox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'soem_ebox': ['/home/giel/etasl/ws/my_new_workspace/src/rtt_soem/soem_ebox/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::soem_ebox::EBOXOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::soem_ebox::EBOXOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soem_ebox::EBOXOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soem_ebox::EBOXOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soem_ebox::EBOXOut_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soem_ebox::EBOXOut_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::soem_ebox::EBOXOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e8010960c65b8a2e79190aa526151a3";
  }

  static const char* value(const ::soem_ebox::EBOXOut_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e8010960c65b8a2ULL;
  static const uint64_t static_value2 = 0xe79190aa526151a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::soem_ebox::EBOXOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "soem_ebox/EBOXOut";
  }

  static const char* value(const ::soem_ebox::EBOXOut_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::soem_ebox::EBOXOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[2] trigger\n\
bool[8] digital\n\
float32[2] analog\n\
uint32 timestamp\n\
int32[2] encoder\n\
";
  }

  static const char* value(const ::soem_ebox::EBOXOut_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::soem_ebox::EBOXOut_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trigger);
      stream.next(m.digital);
      stream.next(m.analog);
      stream.next(m.timestamp);
      stream.next(m.encoder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EBOXOut_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::soem_ebox::EBOXOut_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::soem_ebox::EBOXOut_<ContainerAllocator>& v)
  {
    s << indent << "trigger[]" << std::endl;
    for (size_t i = 0; i < v.trigger.size(); ++i)
    {
      s << indent << "  trigger[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.trigger[i]);
    }
    s << indent << "digital[]" << std::endl;
    for (size_t i = 0; i < v.digital.size(); ++i)
    {
      s << indent << "  digital[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.digital[i]);
    }
    s << indent << "analog[]" << std::endl;
    for (size_t i = 0; i < v.analog.size(); ++i)
    {
      s << indent << "  analog[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.analog[i]);
    }
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "encoder[]" << std::endl;
    for (size_t i = 0; i < v.encoder.size(); ++i)
    {
      s << indent << "  encoder[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.encoder[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOEM_EBOX_MESSAGE_EBOXOUT_H
